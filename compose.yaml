services:

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-latest}
    networks:
      - default
    ports:
      - ${GRAFANA_PORT:-3000}:3000
    volumes:
      - ./config/grafana.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor traceQLStreaming metricsSummary

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-latest}
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
    networks:
      - default
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus.yaml

  loki:
    image: grafana/loki:${LOKI_VERSION:-latest}
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - default
    ports:
      - "3100:3100"

  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  tempo-init:
    image: &tempoImage grafana/tempo:${TEMPO_VERSION:-latest}
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - tempo-data:/var/tempo

  tempo:
    image: *tempoImage
    command: [ "-config.file=/etc/tempo.yaml" ]
    networks:
      - default
    ports:
      - "4317:4317"
      # - "3200:3200"
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
      - tempo-data:/var/tempo
    depends_on:
      - tempo-init
      - memcached

  memcached:
    image: memcached:${MEMCACHED_VERSION:-latest}
    networks:
      - default
    ports:
      - "11211:11211"
    environment:
      - MEMCACHED_MAX_MEMORY=64m  # Set the maximum memory usage
      - MEMCACHED_THREADS=4       # Number of threads to use

volumes:
  tempo-data:

networks:
  default: {}